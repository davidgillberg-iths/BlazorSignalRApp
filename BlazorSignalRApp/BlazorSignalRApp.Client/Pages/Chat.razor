@page "/chat"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="container">
    <!-- Registrera med ett användarnamn -->
    <div class="row">
        <div class="col-md-6 mx-auto p-3 border bg-light">
            <h1>Connect to ChatHub</h1>
            <div class="form-group">
                <label>
                    Your user name:
                    <input @bind="myName" />
                </label>
            </div>
            <button @onclick="Connect">Connect</button>

            <hr>

            <div>@registrationError</div>
        </div>
    </div>
    <div class="row">
        <br/>
    </div>
    <div class="row">
        <!-- Vänster kolumn: Skicka meddelanden till alla -->
        <div class="col-md-6 d-flex flex-column justify-content-between p-3 border bg-light">
            <h1 class="text-center">Shout to everyone!</h1>
            <div class="form-group">
                <label>Message:</label>
                <input class="form-control" @bind="shoutInput" size="50" />
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" @onclick="Shout" disabled="@(!IsConnected || !isRegistered)">Shout</button>
            </div>
        </div>

        <!-- Höger kolumn: Skicka privata meddelanden -->
        <div class="col-md-6 d-flex flex-column justify-content-between p-3 border bg-light">
            <h1 class="text-center">Whisper in private</h1>
            <div class="form-group">
                <label>Username of recipient:</label>
                <input class="form-control" @bind="recipientUser" />
            </div>
            <div class="form-group">
                <label>Message:</label>
                <input class="form-control" @bind="whisperInput" size="50" />
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary m-3" @onclick="Whisper" disabled="@(!IsConnected || !isRegistered)">Whisper</button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Vänster kolumn: Meddelanden från alla -->
        <div class="col-md-6 d-flex flex-column justify-content-between p-3 border bg-light">
            <ul class="list-group overflow-auto" style="max-height: 300px;">
                @foreach (var message in publicMessages)
                {
                    <li class="list-group-item">@message</li>
                }
            </ul>
        </div>

        <!-- Höger kolumn: Inkommande privata meddelanden -->
        <div class="col-md-6 d-flex flex-column justify-content-between p-3 border bg-light">
            <ul class="list-group overflow-auto" style="max-height: 300px;">
                @foreach (var message in privateMessages)
                {
                    <li class="list-group-item">@message</li>
                }
            </ul>
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<string> privateMessages = [];
    private List<string> publicMessages = [];
    private string? recipientUser;
    private string? shoutInput;
    private string? whisperInput;
    private string? myName;
    private string? registrationError;
    private bool isRegistered = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceivePrivateMessage", (user, message) =>
        {
            Console.WriteLine("Recieving private message from " + user);
            Console.WriteLine("Message: " + message);
            var encodedMsg = $"{user}: {message}";
            privateMessages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("ReceivePublicMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            publicMessages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RegistrationFailed", (message) =>
        {
            registrationError = message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RegistrationSuccess", (message) =>
        {
            isRegistered = true;
            registrationError = "";
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Connect()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RegisterUser", myName);
        }
    }

    private async Task Shout()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendPublicMessage", myName, shoutInput);
        }
    }

    private async Task Whisper()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine("Send message to " + recipientUser + ": " + whisperInput);
            await hubConnection.SendAsync("SendPrivateMessage", recipientUser, myName, whisperInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}